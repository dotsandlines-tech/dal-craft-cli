#!/bin/bash
set -Eeo pipefail

usage() {
    echo "dal-craft-cli snapshots utility (a3cloud kubectl csi volume snapshot compatible)"
    echo "Usage:"
    echo "  snapshots -h                      Display this help message."
    echo "  snapshots list|info               List available k8s volume snapshots."
    echo "  snapshots create                  Create a new k8s volume snapshot."
    echo "  snapshots print-config            Prints a3cloud k8s ConfigMap/backup-env"
    echo "  snapshots init                    NOOP exit 0"
    echo "  snapshots export <snapshot>       NOT IMPLEMENTED, exit 1"
    echo "  snapshots restore <snapshot>      NOT IMPLEMENTED, exit 1"
}

# no options supplied?
if [ -z "$1" ]; then
    usage
    exit 1
fi

# Parse options to the `snapshot` command
while getopts ":h" opt; do
    case ${opt} in
    h )
        usage
        exit 0
        ;;
    \? )
    echo "Invalid Option: -$OPTARG" 1>&2
    exit 1
    ;;
    esac
done
shift $((OPTIND -1))

subcommand=$1; shift  # Remove 'snapshot' from the argument list
case "$subcommand" in

    init)
    echo "init (noop)"
    ;;

    list)
    set -Eeox pipefail
    kubectl get vs -lbackup-ns.sh/retain -Lbackup-ns.sh/type,backup-ns.sh/retain,backup-ns.sh/daily,backup-ns.sh/weekly,backup-ns.sh/monthly,backup-ns.sh/delete-after
    ;;

    info)
    set -Eeox pipefail
    kubectl get vs -lbackup-ns.sh/retain -Lbackup-ns.sh/type,backup-ns.sh/retain,backup-ns.sh/daily,backup-ns.sh/weekly,backup-ns.sh/monthly,backup-ns.sh/delete-after
    ;;

    print-config)
    set -Eeox pipefail
    kubectl get configmap backup-env -o yaml
    ;;

    create)
    set -Eeox pipefail

    echo "Ensuring there is no other backup job running..."
    kubectl get job -l app=backup

    # ensure there is currently no other backup job running, if that is the case, exit 1
    if kubectl get job -l app=backup -o jsonpath='{.items[*].status.active}' | grep -q "1"; then
        >&2 echo "Another backup job is currently running, exit 1!"
        exit 1
    fi

    timestamp=$(date +"%Y-%m-%d-%H%M%S")

    # we provide the additional env vars (via yq)
    # BAK_LABEL_VS_TYPE: adhoc (flag for adhoc backup job)
    # BAK_LABEL_VS_RETAIN: days (flag for retention policy, currently only days is supported)
    kubectl create job --from=cronjob.batch/backup "backup-adhoc-${timestamp}" -o yaml --dry-run=client \
        | yq eval '.spec.template.spec.containers[0].env += [{"name": "BAK_LABEL_VS_TYPE", "value": "adhoc"}]' - \
        | yq eval '.spec.template.spec.containers[0].env += [{"name": "BAK_LABEL_VS_RETAIN", "value": "days"}]' - \
        | kubectl apply -f -

    sleep 5
    kubectl wait --for=condition=complete --timeout=5m "job/backup-adhoc-${timestamp}"
    ;;

    export)
    >&2 echo "Export not implemented. Please escalate to aaa operations. Exit 1!"
    exit 1
    ;;

    restore)
    >&2 echo "Export not implemented. Please escalate to aaa operations. Exit 1!"
    exit 1
    ;;

    *)
    usage
    exit 1
    ;;

esac